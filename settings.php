<?php


/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */
require_once(ABSPATH . '/wp-admin/includes/upgrade.php');
require "Connector/vendor/autoload.php";
require_once('xml_generator.php');


use Onecode\ShopFlixConnector\Library\Connector;





class get_data_local
{


	public function cron_jobs()
	{
		if (isset($marketplaceapisettings_options['wordpress_cron_13'])) {
			$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
			if (isset($marketplaceapisettings_options['genable_market_place_0'])) {
				$this->update_data();
			}
			if (isset($marketplaceapisettings_options['generate_xml_6'])) {
				$generate_xml = new XML_generator();
				$generate_xml->generate_xml();
			}
		}

		//$auto_orders = $this->auto_woocommerce();
	}

	public function manual_update()
	{
		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		if (isset($marketplaceapisettings_options['genable_market_place_0'])) {
			$this->update_data();
		}
		if (isset($marketplaceapisettings_options['generate_xml_6'])) {
			$generate_xml = new XML_generator();
			$generate_xml->generate_xml();
		}
	}


	public function update_data()
	{



		require_once(ABSPATH . '/wp-admin/includes/upgrade.php');

		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name'); // Array of All Options

		if (array_key_exists('api_url_3', $marketplaceapisettings_options) && array_key_exists('password_5', $marketplaceapisettings_options) && array_key_exists('username_4', $marketplaceapisettings_options)) {

			$api_url = $marketplaceapisettings_options['api_url_3'];
			$username = $marketplaceapisettings_options['username_4'];
			$password = $marketplaceapisettings_options['password_5'];
			if (strlen($api_url) > 0 && strlen($username) > 0 && strlen($password) > 0) {






				$connector = new Connector($username, $password, $api_url);


				$data = $connector->getNewOrders();
				global $table_prefix, $wpdb;

				$tblname = 'onecode_marketplace_order';
				$wp_track_table = $table_prefix . "$tblname";
				$tblname_items = 'onecode_marketplace_order_item';
				$wp_track_table_items = $table_prefix . "$tblname_items";
				$tblname_addresses = 'onecode_marketplace_order_addresses';
				$wp_track_table_addresse = $table_prefix . "$tblname_addresses";
				if ($wpdb->get_var("show tables like '$wp_track_table'") == $wp_track_table) {

					foreach ($data as $ordder) {
						$order_exists = $wpdb->get_var(
							$wpdb->prepare("SELECT `marketplace_order_id` FROM " . $wp_track_table . "  WHERE `marketplace_order_id` = %d", $ordder['order']['shopflix_order_id'])
						);

						if ($order_exists) {
						} else {

							//print_r($ordder['order']['marketplace_order_id']);
							$sql = "INSERT INTO " . $wp_track_table . " (`marketplace_order_id`, `increment_id`, `state`, `customer_firstname`, `customer_lastname`, `subtotal`, `discount_amount`, `total_paid`, `customer_note`,  `woocommerce_orderid`) VALUES ('" . $ordder['order']['shopflix_order_id'] . "', '" . $ordder['order']['increment_id'] . "', '" . $ordder['order']['status'] . "', '" . $ordder['order']['customer_firstname'] . "', '" . $ordder['order']['customer_lastname'] . "', '" . $ordder['order']['subtotal'] . "', '" . $ordder['order']['discount_amount'] . "', '" . $ordder['order']['total_paid'] . "', '" . $ordder['order']['customer_note'] . "', '0') on duplicate key update total_paid = values(total_paid);";

							dbDelta($sql);

							$items = $ordder['items'];

							foreach ($items as $item) {

								$sql_items = "INSERT INTO " . $wp_track_table_items . " (`marketplace_order_id`, `sku`, `price`, `qnt`) VALUES ('" . $ordder['order']['shopflix_order_id'] . "','" . $item['sku'] . "', '" . $item['price'] . "', '" . $item['qty'] . "')";

								dbDelta($sql_items);
							}

							$addresses = $ordder['addresses'];

							foreach ($addresses as $addresse) {

								$sql_items = "INSERT INTO " . $wp_track_table_addresse . " (`marketplace_order_id`, `firstname`, `lastname`, `postcode`, `telephone`, `street`, `city`, `email`, `country_id`, `address_type`) VALUES ('" . $ordder['order']['shopflix_order_id'] . "','" . $addresse['firstname'] . "', '" . $addresse['lastname'] . "', '" . $addresse['postcode'] . "', '" . $addresse['telephone'] . "', '" . $addresse['street'] . "', '" . $addresse['city'] . "', '" . $addresse['email'] . "', '" . $addresse['country_id'] . "', '" . $addresse['address_type'] . "')";

								dbDelta($sql_items);
							}
						}
					}
				}
			}
		}
	}


	public function auto_woocommerce()
	{

		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		if (array_key_exists('auto_convert_to_woocommerce_orders_2', $marketplaceapisettings_options)) {

			global $table_prefix, $wpdb;
			$tblname = 'onecode_marketplace_order';
			$wp_track_table = $table_prefix . "$tblname";
			$sql_order = "SELECT * FROM " . $wp_track_table . " WHERE `state` = 'pending_acceptance'";
			$post_id = $wpdb->get_results($sql_order);

			foreach ($post_id as $post_id_order) {

				$this->create_order($post_id_order->marketplace_order_id);
			}
		}
	}


	public function get_data_orders()
	{

		global $table_prefix, $wpdb;
		$tblname = 'onecode_marketplace_order';
		$wp_track_table = $table_prefix . "$tblname";
		$tblname_items = 'onecode_marketplace_order_item';
		$wp_track_table_items = $table_prefix . "$tblname_items";
		$sql = "SELECT * FROM " . $wp_track_table . " ORDER BY `marketplace_order_id` DESC";
		$post_id = $wpdb->get_results($sql);

		return json_encode($post_id);
	}

	public function get_data_shippings()
	{

		global $table_prefix, $wpdb;
		$tblname = 'onecode_shopflix_shippment';
		$wp_track_table = $table_prefix . "$tblname";
		$tblname_tracks = 'onecode_shopflix_shippment_track';
		$wp_track_table_tracks = $table_prefix . "$tblname_tracks";
		$sql = "SELECT * FROM " . $wp_track_table . " LEFT JOIN " . $wp_track_table_tracks . " ON " . $wp_track_table . ".`shipping_id` = " . $wp_track_table_tracks . ".`parent_id`";

		$post_id = $wpdb->get_results($sql);

		return json_encode($post_id);
	}

	public function reject_order($order_id, $message)
	{
		global $table_prefix, $wpdb;
		$tblname = 'onecode_marketplace_order';
		$wp_track_table = $table_prefix . "$tblname";
		$sql = "UPDATE " . $wp_track_table . " SET `state` = 'reject'  WHERE `marketplace_order_id` = " . $order_id . ";";

		$rez = $wpdb->query($sql);

		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);
		$data = $connector->rejected($order_id, $message);
		return $data;
	}



	public function readyship_order($order_id)
	{
		global $table_prefix, $wpdb;
		$tblname = 'onecode_marketplace_order';
		$wp_track_table = $table_prefix . "$tblname";
		$sql = "UPDATE " . $wp_track_table . " SET `state` = 'ready to ship'  WHERE `marketplace_order_id` = " . $order_id . ";";

		$rez = $wpdb->query($sql);
		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);
		$data = $connector->readyToBeShipped($order_id);
		return $data;
	}



	public function create_order($order_id)
	{


		global $table_prefix, $wpdb;
		$tblname = 'onecode_marketplace_order';
		$wp_track_table = $table_prefix . "$tblname";
		$tblname_items = 'onecode_marketplace_order_item';
		$wp_track_table_items = $table_prefix . "$tblname_items";
		$sql_items = "SELECT * FROM " . $wp_track_table_items . " WHERE marketplace_order_id=" . $order_id;
		$post_id_items = $wpdb->get_results($sql_items);
		$tblname_addresses = 'onecode_marketplace_order_addresses';
		$wp_track_table_addresse = $table_prefix . "$tblname_addresses";
		$sql_addresse = "SELECT * FROM " . $wp_track_table_addresse . " WHERE marketplace_order_id=" . $order_id;
		$post_id_addresse = $wpdb->get_results($sql_addresse);

		global $woocommerce;

		$address_billing = array(
			'first_name' => $post_id_addresse[1]->firstname,
			'last_name'  => $post_id_addresse[1]->lastname,
			'company'    => '',
			'email'      => $post_id_addresse[1]->email,
			'phone'      => $post_id_addresse[1]->telephone,
			'address_1'  => $post_id_addresse[1]->street,
			'address_2'  => '',
			'city'       => $post_id_addresse[1]->city,
			'state'      => $post_id_addresse[1]->city,
			'postcode'   => $post_id_addresse[1]->postcode,
			'country'    =>  $post_id_addresse[1]->country_id
		);


		$address_Shipping = array(
			'first_name' => $post_id_addresse[0]->firstname,
			'last_name'  => $post_id_addresse[0]->lastname,
			'company'    => '',
			'email'      => $post_id_addresse[0]->email,
			'phone'      => $post_id_addresse[0]->telephone,
			'address_1'  => $post_id_addresse[0]->street,
			'address_2'  => '',
			'city'       => $post_id_addresse[0]->city,
			'state'      => $post_id_addresse[0]->city,
			'postcode'   => $post_id_addresse[0]->postcode,
			'country'    =>  $post_id_addresse[0]->country_id
		);

		$order = wc_create_order();


		// The add_product() function below is located in /plugins/woocommerce/includes/abstracts/abstract_wc_order.php
		foreach ($post_id_items as $post_id_item) {


			$product_id = wc_get_product($this->get_product_by_sku($post_id_item->sku));
			$product = wc_get_product($product_id);
			$product = wc_get_product($product);
			if ($product->post_type === "product_variation") {


				$membershipProduct = new WC_Product_Variable($product->get_parent_id());
				$theMemberships = $membershipProduct->get_available_variations();

				$variationsArray = array();

				foreach ($theMemberships as $membership) {
					if ($membership['sku'] == $post_id_item->sku) {
						$variationID = $membership['variation_id'];
						$variationsArray['variation'] = $membership['attributes'];
					}
				}

				if ($variationID) {
					$varProduct = new WC_Product_Variation($variationID);


					$order->add_product($varProduct, $post_id_item->qnt, $variationsArray);
				}
			} else {
				$product = wc_get_product($product_id);
				$quantity = 1;

				$args = array(
					'variation' => array('attribute_color' => 'red'),
				);


				$order->add_product($product, $post_id_item->qnt); // This is an existing SIMPLE product
			}
		}
		$order->set_address($address_billing, 'billing');
		$order->set_address($address_Shipping, 'shipping');
		//
		$order->calculate_totals();

		$order->update_status("completed", 'Imported order', TRUE);
		update_post_meta($order->get_id(), 'shopflix', 'shopflix');

		$woo_order_id = $order->get_id();

		$sql = "UPDATE " . $wp_track_table . " SET `woocommerce_orderid` = " . $woo_order_id . ", `state` = 'picking'  WHERE `marketplace_order_id` = " . $order_id . ";";

		$rez = $wpdb->query($sql);
		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);

		$data = $connector->picking($order_id);


		return $woo_order_id;
	}

	private function get_product_by_sku($sku)
	{

		global $wpdb;

		$product_id = $wpdb->get_var($wpdb->prepare("SELECT post_id FROM $wpdb->postmeta WHERE meta_key='_sku' AND meta_value='%s' LIMIT 1", $sku));

		if ($product_id) return $product_id;

		return null;
	}

	public function get_complete()
	{

		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);


		$data = $connector->getCompletedOrders();
		global $table_prefix, $wpdb;

		$tblname = 'onecode_marketplace_order';
		$wp_track_table = $table_prefix . "$tblname";
		$tblname_items = 'onecode_marketplace_order_item';
		$wp_track_table_items = $table_prefix . "$tblname_items";
		$tblname_addresses = 'onecode_marketplace_order_addresses';
		$wp_track_table_addresse = $table_prefix . "$tblname_addresses";
		if ($wpdb->get_var("show tables like '$wp_track_table'") == $wp_track_table) {

			var_dump($data);
			foreach ($data as $order) {

				$order_exists = $wpdb->get_var(
					$wpdb->prepare("SELECT `marketplace_order_id` FROM " . $wp_track_table . "  WHERE `marketplace_order_id` = %d", $order['order']['shopflix_order_id'])
				);

				if ($order_exists) {
				}
			}
		}
	}

	public function get_shippings()
	{

		global $table_prefix, $wpdb;
		$tblname_post = 'onecode_marketplace_order';
		$wp_track_table_post = $table_prefix . "$tblname_post";
		$sql_order = "SELECT * FROM " . $wp_track_table_post . " WHERE `state` = 'picking'";
		$post_id = $wpdb->get_results($sql_order);

		$tblname = 'onecode_shopflix_shippment';
		$wp_track_table = $table_prefix . "$tblname";
		$tblname_items = 'onecode_shopflix_shippment_item';
		$wp_track_table_items = $table_prefix . "$tblname_items";
		$tblname_addresses = 'onecode_shopflix_shippment_track';
		$wp_track_table_addresse = $table_prefix . "$tblname_addresses";
		if ($wpdb->get_var("show tables like '$wp_track_table'") == $wp_track_table) {

			foreach ($post_id as $post_id_order) {


				$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
				$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);
				$data = $connector->getShipment($post_id_order->marketplace_order_id);

				$shiip_id = $data[0]["shipment"]["increment_id"];
				$shiip_status = $data[0]["shipment"]["shipment_status"];
				$track_number = $data[0]["tracks"]["track_number"];
				$tracking_url = $data[0]["tracks"]["tracking_url"];
				$firstname = $post_id_order->customer_firstname;
				$lastname = $post_id_order->customer_lastname;
				$order_id = $post_id_order->marketplace_order_id;





				$order_exists = $wpdb->get_var(
					$wpdb->prepare("SELECT `shipping_id` FROM " . $wp_track_table . "  WHERE `shipping_id` = %d", $shiip_id)
				);

				if ($order_exists) {
				} else {

					//print_r($ordder['order']['marketplace_order_id']);
					$sql = "INSERT INTO " . $wp_track_table . " (`shippment_uni_id`, `order_id`, `firstname`, `lastname`, `statu`, `shipping_id`) VALUES (NULL, '" . $order_id . "', '" . $firstname . "', '" . $lastname . "', '" . $shiip_status . "', '" . $shiip_id . "');";

					dbDelta($sql);

					$items = $data[0]['items'];

					foreach ($items as $item) {

						$sql_items = "INSERT INTO " . $wp_track_table_items . " (`uni_id`, `parent_id`, `total`, `price`, `qty`, `order_item_id`, `sku`, `name`) VALUES (NULL, '" . $shiip_id . "', 0, 0, '" . $item['qty'] . "', '" . $order_id . "', '" . $item['sku'] . "', NULL)";

						dbDelta($sql_items);
					}





					$sql_items = "INSERT INTO " . $wp_track_table_addresse . " (`uni_id`, `parent_id`, `order_id`, `track_number`, `track_url`, `order_item_id`) VALUES (NULL, '" . $shiip_id . "', '" . $order_id . "', '" . $track_number . "', '" . $tracking_url . "', '0');";

					dbDelta($sql_items);
				}
			}
		}
	}
	/**
	 * 
	 * @throws Exception
	 */


	public function voucher_print($shipmentId)
	{
		$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
		if (isset($marketplaceapisettings_options['print_19'])) {

			$print_format = $marketplaceapisettings_options['print_19'];
		} else {
			//$ean =  get_post_meta($varid, 'ean_shopflix', true);
			$print_format = "pdf";
		}

		try {
			if ($shipmentId) {
				global $table_prefix, $wpdb;
				$tblname = 'onecode_shopflix_shippment';
				$wp_track_table = $table_prefix . "$tblname";
				$tblname_tracks = 'onecode_shopflix_shippment_track';
				$wp_track_table_tracks = $table_prefix . "$tblname_tracks";
				$sql = "SELECT * FROM " . $wp_track_table . " LEFT JOIN " . $wp_track_table_tracks . " ON " . $wp_track_table . ".`shipping_id` = " . $wp_track_table_tracks . ".`parent_id` WHERE " . $wp_track_table . ".`shipping_id` = " . $shipmentId . ";";

				$post_id = $wpdb->get_results($sql);
				$rowcount = $post_id->num_rows;

				if ($rowcount > 0) {

					foreach ($post_id as $post_id_order) {
						if ($post_id_order->track_number) {

							$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);
							$voucherPdf = $connector->printVoucher($post_id_order->track_number, $print_format);
							$fileContent = base64_decode($voucherPdf['Voucher']);
							$DOCUMENT_ROOT = $_SERVER['DOCUMENT_ROOT'];
							$pdf_base64 = $DOCUMENT_ROOT . '/wp-content/uploads/' . $post_id_order->track_number . '.pdf';
							$url_base64 = get_site_url() . '/wp-content/uploads/' . $post_id_order->track_number . '.pdf';
							$content = [
								"type" => "string",
								"value" => $fileContent,
								"rm" => true
							];



							$currentdate = date('d-m-Y_H-i-s');
							$id = 1;
							$DOCUMENT_ROOT = $_SERVER['DOCUMENT_ROOT'];
							$filename = "id_" . $id . "_" . $currentdate . ".pdf";
							$result = file_put_contents($pdf_base64, $fileContent);



							return $url_base64;
						} else {

							return "errr";
						}
					}
				} else {

					$marketplaceapisettings_options = get_option('marketplaceapisettings_option_name');
					$connector = new Connector($marketplaceapisettings_options['username_4'], $marketplaceapisettings_options['password_5'], $marketplaceapisettings_options['api_url_3']);
					try {
						$voucher = $connector->createVoucher($shipmentId);
						$voucher = $voucher['voucher']['ShipmentNumber'];
					} catch (Exception $e) {
						$voucher = $connector->getVoucher($shipmentId);
					}
					if ($voucher) {
						$trackingUrl = $connector->getShipmentUrl($shipmentId);
						$track_number = $voucher;
						global $table_prefix, $wpdb;
						$tblname = 'onecode_shopflix_shippment_track';
						$wp_track_table = $table_prefix . "$tblname";
						$sql = "UPDATE " . $wp_track_table . " SET `track_number` = " . $track_number . ",  `track_url` = " . $trackingUrl . "  WHERE `parent_id` = " . $shipmentId . ";";
						$rez = $wpdb->query($sql);
					}

					$voucherPdf = $connector->printVoucher($voucher, $print_format);
					$fileContent = base64_decode($voucherPdf['Voucher']);
					$DOCUMENT_ROOT = $_SERVER['DOCUMENT_ROOT'];
					$pdf_base64 = $DOCUMENT_ROOT . '/wp-content/uploads/' . $voucher . '.pdf';
					$url_base64 = get_site_url() . '/wp-content/uploads/' . $voucher . '.pdf';
					$content = [
						"type" => "string",
						"value" => $fileContent,
						"rm" => true
					];



					$currentdate = date('d-m-Y_H-i-s');
					$id = 1;
					$DOCUMENT_ROOT = $_SERVER['DOCUMENT_ROOT'];
					$filename = "id_" . $id . "_" . $currentdate . ".pdf";
					$result = file_put_contents($pdf_base64, $fileContent);



					return $url_base64;
				}
			} else {

				return "Error";
			}
		} catch (Exception $e) {
		}
	}
}
